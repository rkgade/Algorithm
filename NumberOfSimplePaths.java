
import java.util.Scanner;
class NumberOfSimplePaths{
    static long edge[][],dp[][];
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();long max=99999;
        int m=sc.nextInt();edge=new long[n][n];
        // input edge[][]
        for(int i=0;i<m;i++)
        { int a=sc.nextInt();
          int b=sc.nextInt();
          long cost=sc.nextLong();
          edge[a][b]=cost;edge[b][a]=cost;
        }
        // length of shortest hamiltonian walk in subgraph
        // generated by vertices in mask that ends in 
        // vertex i
        dp=new long[1<<n][n];
        for(int i=0;i<(1<<n);i++)
        for(int j=0;j<n;j++)
         dp[i][j]=max;
        // base case of one node
        for(int i=0;i<n;i++)
        dp[1<<i][i]=0;
        // computing the number of hamiltonian paths
        for(int i=0;i<n;i++){
            for(int mask=0;mask<(1<<n);mask++)
            if(bit(i,mask)==1 && count(mask)>1){
            long p=max;
            for(int j=0;j<i;j++){
                if(edge[i][j]>0)
                 p+=dp[mask^(1<<i)][j];
                }
            dp[mask][i]=p;
             }
        }
    long min=99999;int end=0;
    // finding the number of path
    int sum=0,mask=0;
    for(int i=0;i<n;i++)
       {   mask=0|(1<<i);
           for(int j=i+1;j<n;j++){
               mask=mask|(1<<j);
               sum+=dp[mask][i];
               mask=0|(1<<i);
            }
       }
    System.out.println("Number of simple paths is : "+(int)(sum/2));
}
public static int bit(int i,int mask){
    if((mask & (1<<i)) != 0)
     return 1;
   return 0;
}
public static int count(int mask){
    int count=0;
    for(int i=0;i<32;i++)
     if((mask & (1<<i)) !=0)
      ++count;
    return count;
}

}
    
            
        
        
